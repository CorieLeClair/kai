package kai.kaibrain.messageinformation

import com.google.gson.JsonParser
import kai.configuration.Kai
import kai.utils.GeneralUtils
import org.apache.commons.io.FileUtils
import org.json.JSONArray
import org.json.JSONObject
import java.io.File

class KaiBrainMessages {
    class ResponseInformation {
        private fun collectAllResponsesFromJsonArray(string : String) : ArrayList<String> {
            val parseString = JsonParser.parseString(string.replace(" ", "_")).asJsonArray
            val parseArray = JsonParser.parseString(parseString[0].toString()).asJsonArray

            val a = ArrayList<String>()

            for(item in parseArray) {
                a.add(item.toString())
            }

            return a
        }

        private fun collectMessageFromJsonArray(string : String) : String{
            val parseString = JsonParser.parseString(string.replace(" ", "_")).asJsonArray
            val parseArray = JsonParser.parseString(parseString[0].toString()).asJsonArray

            return  parseArray.get((0 until parseArray.count()).random()).toString().replace("_", " ")
        }

        private fun collectDescFromJsonArray(string : String) : String{
            return GeneralUtils().stringToList(GeneralUtils().stringToList(string, "::", -1)[0], ":", -1)[1].replace("]", "").replace("[", "")
        }

        private fun collectResponseFromJsonArray(string : String) : String{
            return GeneralUtils().stringToList(string, ":", -1)[0].replace("]", "").replace("[", "")
        }

        private fun collectAutoLearnBooleanFromJsonArray(string : String) : Boolean {
            println(string)
            return try {
                val parseString = JsonParser.parseString(string).asJsonArray
                parseString.get(2).asBoolean

            } catch(e : Exception) {
                false
            }
        }

        private fun collectMockBooleanFromJsonArray(string : String) : Boolean {
            return try {
                val parseString = JsonParser.parseString(string).asJsonArray
                parseString.get(1).asBoolean

            } catch(e : Exception) {
                false
            }
        }

        /** Collect All Messages In Specific File */

        fun collectAllMessagesFromFile(jsonFile : File): JSONArray {
            return try {
                val jsonContent = FileUtils.readFileToString(jsonFile, "utf-8")
                val jsonMain = JSONObject(jsonContent)
                val jsonMessages = jsonMain.getJSONObject("messages")

                jsonMessages.names()
            } catch (ex : IllegalStateException) {
                JSONArray()
            }
        }

        /** Collect All Manually Generated Files */


        fun collectAllManualFiles(builder: Kai.KaiBuilder) : ArrayList<File> {
            return GeneralUtils().getManualFiles("json", builder)
        }

        /** Collect All Manually Generated Messages */

        fun collectAllManualMessages(builder: Kai.KaiBuilder): ArrayList<String> {
            val fileList = GeneralUtils().getManualFiles("json", builder)
            val messageList = ArrayList<String>()

            for(file in fileList){
                for(message in collectAllMessagesFromFile(file)){
                    messageList.add(message.toString().replace("_", " "))
                }
            }

            return messageList
        }

        /** Collect All Auto Learned Messages -- Searches All Files */


        fun collectAllAutoLearnedMessages(builder: Kai.KaiBuilder): ArrayList<String> {
            val fileList = GeneralUtils().getAutoGeneratedFiles("json", builder)
            val messageList = ArrayList<String>()

            for(file in fileList){
                for(message in collectAllMessagesFromFile(file)){
                    messageList.add(message.toString().replace("_", " "))
                }
            }

            return messageList
        }

        /** Collect All Auto Learned Files */

        fun collectAutoFiles(builder: Kai.KaiBuilder): ArrayList<String> {
            val fileList = GeneralUtils().getAutoGeneratedFiles("json", builder)
            val messageList = ArrayList<String>()

            for(file in fileList){
                for(message in collectAllMessagesFromFile(file)){
                    messageList.add(message.toString())
                }
            }

            return messageList
        }

        /** Collect All Messages In These Files : ArrayList<File> */

        fun collectAllMessagesFromListOfFiles(listOfFiles : ArrayList<File>) : ArrayList<String> {
            val listOfMessages = ArrayList<String>()

            for(file in listOfFiles){
                for(message in collectAllMessagesFromFile(file)){
                    listOfMessages.add(message.toString())
                }
            }

            return listOfMessages
        }

        /** Collect All Files In Project */

        fun collectAllMessagesFromProject(builder: Kai.KaiBuilder) : ArrayList<String> {
            val listOfFiles = collectAllFilesForMessages(builder)
            val listOfMessages = ArrayList<String>()

            for(file in listOfFiles){
                for(message in collectAllMessagesFromFile(file)){
                    listOfMessages.add(message.toString())
                }
            }

            return listOfMessages
        }

        /** Collect All Files That Use Mock Systems */

        fun collectAllFilesInMock(builder: Kai.KaiBuilder): ArrayList<File> {
            val directoryTwo = File("${builder.projectPath}/autogen/rev")

            val files = arrayListOf<File>()

            for (f in directoryTwo.listFiles { _, name -> name.toLowerCase().endsWith(".json") }) {
                files.add(File("${directoryTwo}/${f.name}"))
            }

            return files
        }

        /** Collect All Files That Contains Messages */

        fun collectAllFilesForMessages(builder: Kai.KaiBuilder) : ArrayList<File>{
            val fileList = ArrayList<File>()
            for(file in GeneralUtils().getManualFiles("json", builder)){
                fileList.add(file)
            }

            for(file in GeneralUtils().getAutoGeneratedFiles("json", builder)){
                fileList.add(file)
            }

            return fileList
        }

        /** Collect All Responses To A Message -- Searches All Files */

        fun collectRandomResponse(key : String, builder: Kai.KaiBuilder) : String {
             val fileList = collectAllFilesForMessages(builder)

            for(file in fileList){
                for(message in collectAllMessagesFromFile(file)){
                    if(message == key){
                        val jsonContent = FileUtils.readFileToString(file, "utf-8")
                        val jsonMain = JSONObject(jsonContent)
                        val jsonMessages = jsonMain.getJSONObject("messages")
                        return collectMessageFromJsonArray(jsonMessages.get(key).toString())
                    }
                }
            }

            return "null"
        }

        /** Collect All Responses To A Message -- Searches Specific File */

        fun collectAllResponses(key : String, file : File) : ArrayList<String> {
            val jsonContent = FileUtils.readFileToString(file, "utf-8")
            val jsonMain = JSONObject(jsonContent)
            val jsonMessages = jsonMain.getJSONObject("messages")


            return collectAllResponsesFromJsonArray(jsonMessages.get(key).toString())
        }

        /** Collect All Responses To A Message -- Searches All Files */

        fun collectAllResponses(key : String, builder: Kai.KaiBuilder) : ArrayList<String> {
            val fileList = collectAllFilesForMessages(builder)

            for(file in fileList){
                for(message in collectAllMessagesFromFile(file)){
                    if(message == key){
                        val jsonContent = FileUtils.readFileToString(file, "utf-8")
                        val jsonMain = JSONObject(jsonContent)
                        val jsonMessages = jsonMain.getJSONObject("messages")
                        return collectAllResponsesFromJsonArray(jsonMessages.get(key).toString())
                    }
                }
            }

            return arrayListOf("")
        }

        /** Collect Ignore Auto Learn Systems Boolean (true or false) Of A Specific Message */

        fun collectAutoLearnBoolean(key : String, builder: Kai.KaiBuilder) : Boolean {
            val fileList = collectAllFilesForMessages(builder)

            for(file in fileList){
                for(message in collectAllMessagesFromFile(file)){
                    if(message == key){
                        val jsonContent = FileUtils.readFileToString(file, "utf-8")
                        val jsonMain = JSONObject(jsonContent)
                        val jsonMessages = jsonMain.getJSONObject("messages")
                        return collectAutoLearnBooleanFromJsonArray(jsonMessages.get(key).toString())
                    }
                }
            }

            return false
        }

        /** Collect Ignore Mock Systems Boolean (true or false) Of A Specific Message */

        fun collectMockBoolean(key : String, builder: Kai.KaiBuilder) : Boolean {
            val fileList = collectAllFilesForMessages(builder)

            for(file in fileList){
                for(message in collectAllMessagesFromFile(file)){
                    if(message == key){
                        val jsonContent = FileUtils.readFileToString(file, "utf-8")
                        val jsonMain = JSONObject(jsonContent)
                        val jsonMessages = jsonMain.getJSONObject("messages")
                        return collectMockBooleanFromJsonArray(jsonMessages.get(key).toString())
                    }
                }
            }

            return false
        }

        /** Collect Response From Key, From A Specific File */

        fun collectResponse(key : String, file : File) : String {

            for (message in collectAllMessagesFromFile(file)) {
                if (message == key) {
                    val jsonContent = FileUtils.readFileToString(file, "utf-8")
                    val jsonMain = JSONObject(jsonContent)
                    val jsonMessages = jsonMain.getJSONObject("messages")
                    return collectMessageFromJsonArray(jsonMessages.get(key).toString())
                }
            }

            return "null"
        }

        /** Collect Desc Of A Message/Response -- Used For Auto Learn Messages */

        fun getResponseFromDesc(key : String, builder: Kai.KaiBuilder, messageType : BrainClasses.MessageType.Question) : String{
            val fileList = GeneralUtils().getAutoGeneratedFiles("json", builder)

            for(file in fileList){
                for(message in collectAllMessagesFromFile(file)){
                    if(message == key) {

                        val jsonContent = FileUtils.readFileToString(file, "utf-8")
                        val jsonMain = JSONObject(jsonContent)
                        val jsonMessages = jsonMain.getJSONObject("messages")
                        val listOfResponses = GeneralUtils().stringToList(jsonMessages.toString(), "::", -1)

                        return when (messageType) {
                            BrainClasses.MessageType.Question.Ask001 -> GeneralUtils().stringToList(listOfResponses[0], ":", 0)[0].replace("\"", "")
                            BrainClasses.MessageType.Question.Ask002 -> GeneralUtils().stringToList(listOfResponses[1], ":", -1)[0]
                            BrainClasses.MessageType.Question.Ask003 -> GeneralUtils().stringToList(listOfResponses[2], ":", -1)[0]
                            BrainClasses.MessageType.Question.Ask004 -> GeneralUtils().stringToList(listOfResponses[3], ":", -1)[0]
                            BrainClasses.MessageType.Question.Ask005 -> GeneralUtils().stringToList(listOfResponses[4], ":", -1)[0]
                            BrainClasses.MessageType.Question.Unknown -> "I'm not sure what you are trying to say about $message"
                            else -> "I'm not sure what you are trying to say about $message"
                        }
                    }
                }
            }

            return "null"
        }

        /** Collect Messages In The Form Of A Map */
        fun collectMessagesFormMap(file : File): HashMap<String, String> {
            val messages = collectAllMessagesFromFile(file)

            val map = HashMap<String, String>()

            for(message in messages) {
                map[message.toString()] = collectResponse(message.toString(), file)
            }

            return map
        }
    }
}